---
- hosts: localhost
  vars:
        key_name: "iirouu"
  tasks:
    - name: Käynnistä AWS:ään EC2 instanssi
      ec2:
        key_name: "{{ key_name }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        instance_tags:
          Name: "{{ instance_name }}"
        vpc_subnet_id: subnet-207c7a66
        assign_public_ip: yes
      register: ec2

    - name: Lisää hostit grouppiin
      add_host: hostname={{ item.public_ip }} groupname=oulu
      with_items: ec2.instances


    - name: Odota että SSH-nousee
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: ec2.instances

    - name: Settaa public_ip
      shell: echo "{{ item.public_ip }}" > tmp_ip
      with_items: ec2.instances

- name: Konfataan instanssit
  hosts: oulu
  sudo: yes
  user: ec2-user
  gather_facts: false
  tasks:

    - name: Asenna httplib2
      yum: name=python27-httplib2 state=latest

    - name: Asenna InfluxDB
      yum: name=http://s3.amazonaws.com/influxdb/influxdb-latest-1.x86_64.rpm state=present

    - name: Konfiguroi InfluxDB
      template: src=templates/config.toml.j2 dest=/opt/influxdb/shared/config.toml

    - name: InfluxDB service päälle
      service: name=influxdb state=started enabled=yes

    - name: Odota että InfluxDB nousee
      wait_for: port=8086 delay=2

    - name: influxdb lampotila database
      uri:
        url: 'http://localhost:8086/db?u=root&p=root'
        method: POST
        body: '{"name": "lampotila"}'
        status_code: 200,201,409
        return_content: yes
        tags: influxdb


- name: Konfataa RPI
  hosts: pi
  sudo: yes
  user: pi
  tasks:
    - name: Tarkista että GPIO moduuli on kernelissä päällä
      modprobe: name=w1-gpio state=present

    - name: Tarkista että Thermal moduuli on kernelissä päällä
      modprobe: name=w1-therm state=present

    - name: Luo projekti hakemisto
      file: path={{ projektin_hakemisto }} state=directory

    - name: Haetaan anturin tietoja
      shell: find /sys/devices/w1_bus_master1/ |grep w1_slave
      register: w1_slave

    - name: Vie keräilijä paikalleen
      template: dest={{ projektin_hakemisto }}/thermal_collector.py src=templates/thermal_collector.py.j2 backup=yes

    - debug: var=ec2
    - name: Vie scripta paikalleen
      template: dest={{ projektin_hakemisto }}/run.sh src=templates/run.sh.j2 backup=yes mode="u=rwx,g=rwx,o=r"
      with_items: ec2.instances

    - name: Aja skriptiä cronissa 1min välein
      cron:
        name="Lämpötila check"
        minute="*/1"
        job="{{ projektin_hakemisto }}/run.sh 2>&1"


    - debug: msg="Demo on osoitteessa: http://{{ lookup('file', 'tmp_ip') }}:8083 - Hyviä demoiluja, sir."
